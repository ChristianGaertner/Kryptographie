{"name":"Informatik Blog","tagline":"Keep it cool.","body":"# Kryptographie\r\n\r\nLos gehts! Wer nicht weiß was oder wer das ist sollte jetzt aufpassen!\r\n\r\nKryptographie ist die Wissenschaft der Verschlüsselung und befasst sich mit der Geheimhaltung von vertraulichen Informationen.\r\n\r\n\r\n## Doch wie funktioniert das ganze?\r\n\r\nEs gibt viele verschiedene Arten der Verschlüsselung. Hier werden wir uns auf 3 mehr oder weniger simple Verfahren konzentrieren.\r\n\r\n\r\n### Caesar\r\n\r\nCaesar ist zugegeben die einfachste aller Verschlüsselungen und viele bereits aus dem Kindes-Alter bekannt, damals noch mit Dreh-Kärtchen oder ähnlichem.\r\n\r\nBasieren tut diese Verschlüsselungsart auf der Verschiebung von einzelne Buchstaben.\r\n\r\nEin Beispiel:\r\n\r\n`ABCD => BCDE`\r\n\r\nAngewendet wurde der Schlüssel `A => B`, oder einfach nur `B`.\r\n\r\nWie man unschwer erkennen kann, lässt sich das ganze schnell und einfach durchführen (und ebenso schnell zurückrechnen).\r\n\r\nAl­go­rith­mische Darstellung (Pseudo-Code):\r\n\r\n(Buchstaben werden als Zahl dargestellt (A=1, B=2, ..., Z=25).\r\n\r\nBuchstabe `x` soll verschlüsselt werden mit Schlüssel `s`:\r\n\r\n```javascript\r\nV(s,x) = ((int) x +  (int) n) mod 26\r\n```\r\n\r\nUnd entschlüsselt wird dann sehr ähnlich:\r\n\r\n```javascript\r\nE(s,x) = ((int)x - (int) n) mod 26\r\n```\r\n\r\n**Achtung:** Diese Methode funktioniert _nur_ mit Buchstaben im Alphabet _(A-Z)_ und auch nur groß _oder_ klein Buchstaben. Es wird also empfohlen vorher alle Buchstaben in eine Schreibweise zu konvertieren und Leerzeichen zu entfernen.\r\n\r\n```javascript\r\nV(s.toUpperCase(), x.toUpperCase.replace(/\\s+/g, '')) = ((int) x +  (int) n) mod 26\r\nE(s, x.toUpperCase.replace(/\\s+/g, '')) = ((int)x - (int) n) mod 26\r\n```\r\nIn diesem Beispiel wurden alle Zeichen erst in Großbuchstaben konvertiert (`.toUpperCase()`) und anschließend wird mit Hilfe von regulären Ausdrücken (_RegEx_) Leerzeichen entfernt (`.replace(/\\s+/g, '')`). Natürlich gibt uns diese Methode noch immer Fehler, wenn Sonderzeichen im Text vorhanden sind.\r\n\r\nEine mögliche Lösung wäre nicht streng der Spezifikation der Caesar Verschlüsselung zu folgen und auf den _ASCII Code_ (_American Standard Code for Information Interchange_) zu setzten und das Alphabet zu verlassen. Anstatt bei Z wieder zu A umzuschlagen wird einfach weiter im ASCII Code gegangen - und somit jedes Zeichen verschlüsseln zu können. Dadurch werden unsere Funktionen auch wieder um ein vielfaches Einfacher:\r\n\r\n```javascript\r\nV(s,x) = (x + n)\r\nE(s,x) = (x - n)\r\n// s & x müssen als Zahl vorliegen (ASCII Code)\r\n```\r\n\r\n\r\n### Vigenère\r\n\r\nUm die Probleme der schnellen und einfach Entschlüsselung des Caesar Chiffres vorzubeugen wurde einige Zeit später die Vigenère Verschlüsselung entwickelt. Jene basiert zwar immer noch auf dem gleichen Prinzip wie Caesar, nämlich dem Verschieben von Buchstaben, aber ist etwas sicherer, da der Schlüssel nicht nur aus einem Buchstaben besteht.\r\n\r\nKonkret sieht das ganze so aus, dass ein Schlüssel **Wort** genutzt wird. Auf den ersten Buchstabe des Klartextes wird der erste Buchstabe des Schlüssel-Wortes angewendet, immer 1. & 1. und 2. & 2.\r\n\r\nBis das Ende des Schlüssel-Wortes erreicht wird. Nun wird wieder mit dem 1. Buchstabe des Schlüssel Wortes angefangen, usw.\r\n\r\nPseudo-Code:\r\n\r\n```javascript\r\nV(s,x) = (x + n) // Caesar!\r\n\r\nfor (index i in klartext) {\r\n  put V(schluessel[i mod schluessel.length], klartext[i])\r\n}\r\n```\r\n\r\nEin Beispiel:\r\n\r\n```javascript\r\nklartext = \"GEHEIMENACHRICHT\"\r\nschluessel = \"KEY\"\r\n// Vigenère ausführen\r\n// stdout:\r\nRJGPNLPSZNMQTHGE\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}